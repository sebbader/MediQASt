package inputmanagement;

import inputmanagement.candidates.impl.SparqlCandidate;
import inputmanagement.impl.GenerateSparqlException;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

import com.hp.hpl.jena.query.QueryException;
import com.hp.hpl.jena.query.QueryParseException;

import edu.stanford.lemmatizer.StanfordLemmatizer;

/**
 * 
 * @author Sebastian Bader (sebastian.bader@student.kit.edu)
 *
 */
public interface InputManager {

	/**
	 * main method of the whole application. Sparql queries are created using
	 * different algorithms: A) input is already valid sparql - no further
	 * processing B) ...
	 * 
	 * @return
	 * @throws GenerateSparqlException
	 * @throws IOException
	 */
	public List<SparqlCandidate> generateSparql()
			throws GenerateSparqlException;

	/**
	 * sends the SPARQL queries which are generated by "generateSparql()"
	 * 
	 * @param query
	 * @return
	 * @throws QueryParseException
	 * @throws QueryException
	 */
	public List<String> executeSparql(String query) throws QueryParseException,
			QueryException;

	/**
	 * adds a parameter map to the InputManager possible parameters are: -
	 * "directSparqlPossible" : true/false the input question can be treated as
	 * a SPARQL query if the format is valid - "questionAnalyser":
	 * "ReVerb"/"CASIA"/... determines which algorithm is used for question
	 * analyzing - "resourceMapper": "luceneStandard"/... -
	 * "considerReltionEnvironemnt": true/false - "sparqlGenerator": "standard"
	 * - "KeyWordQuestionThreshold": double > 0.0 - "sparqlOption":
	 * "greedy"/"alternating"/"distribution"
	 * 
	 * @param param
	 */
	public void setParameter(HashMap<String, String> param);

	/**
	 * returns whether or not the possible option is chosen in the parameter map
	 * 
	 * @param key
	 *            the parameter name as String
	 * @param expectedValue
	 *            the String value which implies to execute the option (e.g.
	 *            "true")
	 * @return true/false
	 * @throws GenerateSparqlException
	 */
	public boolean isActiveOption(String key, Object expectedObject);

	/**
	 * returns the parameter HashMap for this InputManager instance
	 * 
	 * @return
	 */
	public HashMap<String, String> getParameter();

	/**
	 * returns the specific value for a parameter or null, if parameter is not
	 * set/unknown
	 * 
	 * @param key
	 * @return
	 * @throws GenerateSparqlException
	 */
	public String getOption(String key) throws GenerateSparqlException;

	/**
	 * returns or creates the Stanford Lemmatizer
	 * this way, the models are only loaded once
	 * @return
	 */
	public StanfordLemmatizer getLemmatizer();

}
